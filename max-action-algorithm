Approach 1.

Returns the maximum ammount of decompositions of the task n given a Searchnode node
in an hierachical planning problem with (0 ... n_max) tasks and (0 ... m_max) methods).

Input: Searchnode - node; Task - task_x;

int task_x_maxValue = 0;

Queue producer
producer.push((noop(x),task_x,1))

//Every task can possible contribute to producing task_x
//The int value indicates how often task_x can be produced from the current task
//If the int value is -1 then it cant be calculated right away
//For such tasks the the produced sets of tasks will be stored in postCalcContributions

Array<list<<int,list<task>>> postcalcContributions[task_1 ... task_n_max]
Array<int> contributions[task_1 ... task_n_max]
for(i: 0 ... n_max){
	if(isAbstract(task_i){
		contribution[task_i] = -1
	}else{
		contribution[task_i] = 0
	}
	postCalcContributions[task_i] = {}
}
contribution[task_x]=1

while(producer != empty){
	(currM,currN,currY) = producer.pop

	//update contribution of task(currM)
	currTask = task(currM)
	
	bool primitiveContribution = true;
	
	int newContribution = 0;
	list newPostCalc = {}
	for(subtask in subtasks(currM){
		if(contribution[subtask] > -1){
			newContribution += contribution[subtask]
		}else{
			newPostCalc.push(subtask)
			primitiveContribution = false
		}
	}
	if(primitiveContribuion){
		contribution[currTask] = max{contribution[currTask,newContribution}	
	}else{
		contribution[currTask] = -1
		postCalcContribution[currTask].push(<newContribution,newPostCalc>)
	}
	
	
	//consider additional producers
	for((m,x,n) in producer(currTask)){
		//maybe check for cycles
		if(!producer.contains(m,x,n)){
			producer.push((m,x,n))
		}
    	}
}

while(!postCalcFinished){
	bool postCalcFinished = true;
	for(i : 0 ... n_max){
		if(postsCalcContribution[task_i] != empty){
			postCalcFinished = false;
		}
		bool all_lists_emtpy = true;
		for(<currInt,currList> : postCalcContribution[task_i]){
			if(currList != empty){
				all_lists_empty=false;
			}
			for(task : currList){
				if(contribution[task] >-1){
					currList.remove(task)	
					currInt += contribution[task]
				}	
			}
		}
		if(all_lists_empty){
			for(<currInt,currList> : postCalcContribution[task_i]){
				contribution[task_i]=max{contribution[task_i],currInt)}
			}
		}
	}
}

for(task in containedTask(node)){
	task_x_max += contribution[task]	
}

return task_x_maxValue

subtasks(m) := multiset of subtasks that will be produced by method m

producer(n):= set of tuples (m,n,y) where the task_n can be produced y >=1 times as subtask of m.

task(m):= task that is decomposed in the method m.

containedTask(node) := multiset of tasks that are contained in the current searchnode 
If an task has x occurences in node it will be contained x times in the multiset.

noop(x) := dummy method that decomposes x into x

isAbstract(task) := true if task is an Abstract task, false otherwise

Approach 2.

Returns the maximum ammount of decompositions of the task n given a Searchnode node
in an hierachical planning problem with (0 ... n_max) tasks and (0 ... m_max) methods).
Nodes is a mulitset of tasks(can contain multiple instances of tasks).
boolNode is a multiset of tasks with a boolean Value for every task that indicates if the task has already been decomposed

Input: node - initialNode; Task - task_x;

int task_x_maxValue = 0;

Queue<boolNode> fringe
List<boolNode> leafs

boolNode initialBoolNode
for(task in initialNode){
	initialBoolNode.add(<task,false>)
}
fringe.push(initialBoolNode)

while(fringe != empty){
	curr = fringe.pop
	bool isLeaf=true
	for(<task,bool> in curr){
		if(isAbstract(task) && bool == false){
			for(currMethod in methods(task)){
				bool = true
				fringe.push(curr Union <subtask(currMethod),false>)
			}		
			isLeaf=false
		}	
	}
	if(isLeaf){
		leafs.add(curr)	
	}
}

for(leaf in leafs){
	task_x_maxValue=max(contains(leaf,task_x),task_x_maxValue)
}




isAbstract(task) := true if task is an Abstract task, false otherwise
methods(task) := set of methods that are applicable to task
subtask(method) := set of subtasks that will be produced by method


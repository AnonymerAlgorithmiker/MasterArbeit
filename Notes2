How do we calculate how often an Action can be executed inside an acyclic Problem?

- Create an TDG and count the related vertecies?
TDG nach der Definition im DOR Paper

What is the definiton of a cyclic Problem?
Contains SCC with size > 2(Laut PANDA and erwÃ¤hnt in DOR-Paper)
SCC -> Set of Actions that contains other Members of the SCC in its Subtasks
Calculated by trajan algorithm of the TDG

Definitons from Paper:
UA_n = TNI_n + Sum_{m in mst(n)) M_m (C7)
mst(n) is the mulitset of methods where the task n is contained as a subtask.(Including multible occurences)

Algorithm to determine UA_n,max

int result = 0;
Queue producer
for(m in mst(n)){
	producer.push(task(m))
}
while(stack != empty){
	curr = producer.pop
	if(task(curr) in tnI){
		result++
	}
	for(m in mst(task(curr))){
		producer.push(m)
	}
}

return result


Algorithm to determine M_m,max

int result = 0;
Queue producer
producer.push(task(m))
while(stack != empty){
	curr = producer.pop
	if(curr in tnI){
		result++
	}
	for(m in mst(curr)){
		producer.push(m)
	}
}

return result

